{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TigerTail Docs","text":"<p>This site contains the project documentation for the <code>TigerTail</code> library. TigerTail is an event analysis library that helps analysts calculate non-stationary time windows prior to events of interest across multivariate time series data sets. This documentation site aims to explain the use and function of TigerTail classes and methods and to show examples of how to apply them to the analysis of different datasets.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<p>The TigerTail documentation consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>TigerTail</code> library code.</p> <p>The TigerTail module contains the following classes:</p> <ul> <li><code>TimeFrame</code> - Dict mapping to TimeSeries and EventSeries objects.</li> <li><code>TimeSeries</code> - Wrapper for DataFrames of time series data.</li> <li><code>EventSeries</code> - Wrapper for DataFrames of event series data.</li> </ul>"},{"location":"reference/#TT.tigertail.EventSeries","title":"<code>EventSeries</code>","text":"<p>The EventSeries class provides a wrapper for a pandas DataFrame of event data. The class  functions allow the event series data to be windowed according to uniform periods of time (frequencies).</p> <p>Methods:</p> Name Description <code>window</code> <p>Uses groupby to group the data by the input frequency and applies the aggregation function to each group.</p> <code>calc_start_end</code> <p>Calculates a list of tuples of the start and end timestamps between events and assigns it to              self.ns_window.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>pandas DataFrame</code> <p>pandas DataFrame containing event data.</p> <code>agg_func</code> <code>numpy method</code> <p>The numpy aggregation function to be used when windowing the data.</p> <code>ns_window</code> <code>list</code> <p>Contains a list of the intervals between events calculated by calc_start_end().</p>"},{"location":"reference/#TT.tigertail.EventSeries.calc_start_end","title":"<code>calc_start_end()</code>","text":"<p>The calc_start_end function calculates the time intervals between events. It sets self.ns_window to be the resulting list of tuples of start and end times between events.</p> <p>Args: N/A Returns: N/A</p>"},{"location":"reference/#TT.tigertail.EventSeries.window","title":"<code>window(freq, fillnan=True)</code>","text":"<p>The window function uses groupby (from pandas) to group the data by the input frequency and applies  the aggregation function (the class agg_func attribute) to each group.</p> <p>Parameters:</p> Name Type Description Default <code>freq</code> <code>str</code> <p>The length of the time. For example, '1h' for one hour.         See here for list of default frequencies: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases</p> required <code>fillnan</code> <code>bool, default True</code> <p>Determines whether NaN values in the resulting are replaced by 0s.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>windowed_df</code> <p>A DataFrame of the windowed data.</p>"},{"location":"reference/#TT.tigertail.TimeFrame","title":"<code>TimeFrame</code>","text":"<p>               Bases: <code>MutableMapping</code></p> <p>The TimeFrame class follows the structure of a pandas DataFrame and is meant to contain TimeSeries and EventSeries objects.  It inherits from the MutableMapping class to be a mapping that works like both a dict and a mutable object,  i.e. d = D(foo='bar') and  d.foo returns 'bar'.</p> <p>Methods:</p> Name Description <code>__setitem__</code> <p>Sets a key-value pair.</p> <code>__getitem__</code> <p>Returns the value associated with a key.</p> <code>__delitem__</code> <p>Deletes a key-value pair.</p> <code>__iter__</code> <p>Returns an iterator based on self.dict</p> <code>__len__</code> <p>Returns the length of the dict mapping.</p> <code>__str__</code> <p>Returns a string representation of the dict mapping.</p> <code>__repr__</code> <p>Returns a string containing the class, id, &amp; reproducible representation in the REPL.</p> <code>window</code> <p>Windows the data of each TimeSeries or EventSeries object in self.dict according to the input frequency and      concatenates them into a single DataFrame.</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__delitem__","title":"<code>__delitem__(key)</code>","text":"<p>delitem is used for deleting a key-value pair for the dict representation of the mapping.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>String for the dict key.</p> required <p>Returns: N/A</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>getitem is used for getting the value associated with the inputted key from the TimeFrame dict.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>String for the dict key.</p> required <p>Returns: self.dict[key]</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Use the object dict</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__iter__","title":"<code>__iter__()</code>","text":"<p>iter is used to generate an iterator using self.dict.</p> <p>Args: N/A</p> <p>Returns: Iterator object</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__len__","title":"<code>__len__()</code>","text":"<p>len is used for getting the length of the dict representation of the mapping.</p> <p>Args: N/A</p> <p>Returns: The length of self.dict.</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__repr__","title":"<code>__repr__()</code>","text":"<p>repr returns a string containing the class, id, &amp; reproducible representation in the REPL.</p> <p>Args: N/A</p> <p>Returns: String containing the class, id, &amp; reproducible representation in the REPL.</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>setitem is used for setting a key-value pair for the TimeFrame dict.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>String for the dict key.</p> required <code>value</code> <p>Value to pair with the key.</p> required <p>Returns: N/A</p>"},{"location":"reference/#TT.tigertail.TimeFrame.__str__","title":"<code>__str__()</code>","text":"<p>str returns a simple dict representation of the mapping.</p> <p>Args: N/A</p> <p>Returns: String version of self.dict.</p>"},{"location":"reference/#TT.tigertail.TimeFrame.window","title":"<code>window(freq, fillnan=True)</code>","text":"<p>The window function windows all the time and event series data stored in the object according to either a certain uniform time or event timestamps. It first calls the window function of each  TimeSeries or EventSeries object. It then concatenates all of the returned windowed DataFrames together.</p> <p>Parameters:</p> Name Type Description Default <code>freq</code> <code>str or EventSeries</code> <p>Either a string representing the uniform length of time to window by (i.e. '1h' for one hour), or an EventSeries object containing the data to be used for windowing.                         See here for list of default frequencies: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases</p> required <code>fillnan</code> <code>bool, default True</code> <p>Determines whether NaN values in the result DataFrame are replaced by 0s.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>windowed_df</code> <p>A DataFrame of the concatenated windowed data.</p>"},{"location":"reference/#TT.tigertail.TimeSeries","title":"<code>TimeSeries</code>","text":"<p>The TimeSeries class provides a wrapper for a pandas DataFrame of time series data. The class  functions allow the time series data to be windowed according to uniform periods of time (frequencies) or event timestamps  (nonstationary windowing).</p> <p>Methods:</p> Name Description <code>window</code> <p>Uses groupby to group the data by the input frequency and applies the aggregation function to each group.</p> <code>nonstationary_window</code> <p>Groups the data using the timestamps of the inputted EventSeries data and                 applies the aggregation function to each group.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>pandas DataFrame</code> <p>pandas DataFrame containing time series data.</p> <code>agg_func</code> <code>numpy method</code> <p>The aggregation function to be used when windowing the data.</p>"},{"location":"reference/#TT.tigertail.TimeSeries.nonstationary_window","title":"<code>nonstationary_window(es, fillnan=True)</code>","text":"<p>The nonstationary window function groups the data by the time intervals between events from an EventSeries object and applies  the aggregation function (the class agg_func attribute) to each group.</p> <p>Parameters:</p> Name Type Description Default <code>es</code> <code>EventSeries</code> <p>The EventSeries object that contains the event data to use for windowing.</p> required <code>fillnan</code> <code>bool, default True</code> <p>Determines whether NaN values in the result DataFrame are replaced by 0s.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>ns_window_result_df</code> <code>DataFrame</code> <p>A DataFrame of the nonstationary windowed data.</p>"},{"location":"reference/#TT.tigertail.TimeSeries.window","title":"<code>window(freq, fillnan=True)</code>","text":"<p>The window function uses groupby (from pandas) to group the data by the input frequency and applies  the aggregation function (the class agg_func attribute) to each group.</p> <p>Parameters:</p> Name Type Description Default <code>freq</code> <code>str</code> <p>The uniform length of time to window by. For example, '1h' for one hour.         See here for list of default frequencies: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases</p> required <code>fillnan</code> <code>bool, default True</code> <p>Determines whether NaN values in the resulting are replaced by 0s.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>windowed_df</code> <code>DataFrame</code> <p>A DataFrame of the windowed data.</p>"}]}